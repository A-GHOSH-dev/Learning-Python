Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 26 2018, 23:26:24) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "copyright", "credits" or "license()" for more information.
>>> 
>>> 
>>> 
>>> 
>>> 
>>> 
>>> and, or, not
SyntaxError: invalid syntax
>>> 
>>> 
>>> 
>>> 
>>> 1&1
1
>>> 1&0
0
>>> 0&0
0
>>> 1|0
1
>>> 0|0
0
>>> 1^1
0
>>> 1^0
1
>>> 13
13
>>> 1101
1101
>>> bin(13)
'0b1101'
>>> 
>>> 
>>> 
>>> 
>>> 'a<<b'
'a<<b'
>>> 
>>> 13<<1
26
>>> bin(26)
'0b11010'
>>> 
>>> 
>>> 13>>1
6
>>> bin(6)
'0b110'
>>> 32*256
8192
>>> 2**13
8192
>>> bin(13)
'0b1101'
>>> 13 >> 1
6
>>> a = 13
>>> a&1
1
>>> 13&1
1
>>> 45&1
1
>>> 42&1
0
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
Traceback (most recent call last):
  File "/Users/proRam/Documents/GS/Day3-BinaryExponentiation.py", line 22, in <module>
    a = int(input())
KeyboardInterrupt
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
2
13
8192 8192 8192
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
2
13
i 4
8192 8192 8192
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
4
Traceback (most recent call last):
  File "/Users/proRam/Documents/GS/Day3-BinaryExponentiation.py", line 27, in <module>
    print(binpow(a,b))
  File "/Users/proRam/Documents/GS/Day3-BinaryExponentiation.py", line 19, in binpow
    i += 1
KeyboardInterrupt
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
2
i 10
10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376
>>> 
====== RESTART: /Users/proRam/Documents/GS/Day3-BinaryExponentiation.py ======
3
i 14

>>> 
>>> 
>>> 
>>> 12>>1
6
>>> 6>>1
3
>>> 3>>1
1
>>> range( [start], stop, [step] )
Traceback (most recent call last):
  File "<pyshell#48>", line 1, in <module>
    range( [start], stop, [step] )

NameError: name 'start' is not defined

>>> 
>>> 

>>> range(0,b,1)
range(0, 10000)
>>> 
>>> 
>>> 

>>> 
>>> 
>>> 

>>> 
>>> s = "Hello World"
>>> 
>>> 
>>> 
>>> s[ 1:5:1 ]
'ello'
>>> s[ 1:5:2 ]
'el'
>>> s[ 1:7:2 ]
'el '
>>> s[4:6]
'o '
>>> s[:6]
'Hello '
>>> s[6:]
'World'
>>> s[6::2]
'Wrd'
>>> s[-1:-8]
''
>>> s[10:3]
''
>>> s[-1:-8:-1]
'dlroW o'
>>> 
>>> 
>>> 
>>> s[::-1]
'dlroW olleH'
>>> 
>>> 
>>> l = [1,2,3,4,5,6]
>>> l[::-1]
[6, 5, 4, 3, 2, 1]
>>> l[2:5]
[3, 4, 5]
>>> l[2:15]
[3, 4, 5, 6]
>>> l[::]
[1, 2, 3, 4, 5, 6]
>>> 
>>> 
>>> 
>>> 
>>> 
>>> range(10)[::3]
range(0, 10, 3)
>>> l = [1,2,3,4,5,6]
>>> 
>>> 
>>> l[2::2]
[3, 5]
>>> 
>>> 
>>> 
>>> l
[1, 2, 3, 4, 5, 6]
>>> b = l
>>> b
[1, 2, 3, 4, 5, 6]
>>> b[4] = 100
>>> b
[1, 2, 3, 4, 100, 6]
>>> l
[1, 2, 3, 4, 100, 6]
>>> help(list)
Help on class list in module builtins:

class list(object)
 |  list(iterable=(), /)
 |  
 |  Built-in mutable sequence.
 |  
 |  If no argument is given, the constructor creates a new empty list.
 |  The argument must be an iterable if specified.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(self, /)
 |      Return a reverse iterator over the list.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(self, /)
 |      Return the size of the list in memory, in bytes.
 |  
 |  append(self, object, /)
 |      Append object to the end of the list.
 |  
 |  clear(self, /)
 |      Remove all items from list.
 |  
 |  copy(self, /)
 |      Return a shallow copy of the list.
 |  
 |  count(self, value, /)
 |      Return number of occurrences of value.
 |  
 |  extend(self, iterable, /)
 |      Extend list by appending elements from the iterable.
 |  
 |  index(self, value, start=0, stop=9223372036854775807, /)
 |      Return first index of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  insert(self, index, object, /)
 |      Insert object before index.
 |  
 |  pop(self, index=-1, /)
 |      Remove and return item at index (default last).
 |      
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(self, value, /)
 |      Remove first occurrence of value.
 |      
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(self, /)
 |      Reverse *IN PLACE*.
 |  
 |  sort(self, /, *, key=None, reverse=False)
 |      Stable sort *IN PLACE*.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None

>>> b = l
>>> 
>>> 
>>> b = l.copy()
>>> 
>>> 
>>> b
[1, 2, 3, 4, 100, 6]
>>> l
[1, 2, 3, 4, 100, 6]
>>> b[0] = -1234
>>> b
[-1234, 2, 3, 4, 100, 6]
>>> l
[1, 2, 3, 4, 100, 6]
>>> 
>>> 
>>> 
>>> [1,2,3,4,5].extend([10,20,30])
>>> l.extend([10,20,30])
>>> l
[1, 2, 3, 4, 100, 6, 10, 20, 30]
>>> nl = l[:4]
>>> nl.extend(l[5:])
>>> nl
[1, 2, 3, 4, 6, 10, 20, 30]
>>> nl = l[:4]
>>> nl.extend(l[7:])
>>> nl
[1, 2, 3, 4, 20, 30]
>>> 
>>> 
>>> 
>>> s = "Shubh"
>>> b = "Bansal"
>>> s + b
'ShubhBansal'
>>> nl = l[:4] + l[5:]
>>> nl
[1, 2, 3, 4, 6, 10, 20, 30]
>>> l = l[:4]
>>> l
[1, 2, 3, 4]
>>> |      Stable sort *IN PLACE*.
SyntaxError: invalid syntax
>>> 
>>> 
>>> 
>>> 
>>> 1<<2000

>>> 
